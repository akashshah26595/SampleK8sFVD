#!/bin/bash

sudo apt-get -y install jq
usage() {
    err "Invalid usage. Usage: "
    err "\t$0 init"
    err "\t$0 mount <mount dir> <json params>"
    err "\t$0 unmount <mount dir>"
    err "\t$0 getvolumename <json params>"
    exit 1
}
err() {
    echo -ne $* 1>&2
}

log() {
    echo -ne $* >&1
}

ismounted() {
    MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
    if [ "${MOUNT}" == "${MNTPATH}" ]; then
        echo "1"
    else
        echo "0"
    fi
}

domount() {
    MNTPATH="$1"
    VOLUME_SRC=$(echo "$2" | jq -r '.source')
    echo $MNTPATH >> /usr/libexec/kubernetes/kubelet-plugins/volume/exec/cb~temp/dump.txt
    MOUNT_OPTIONS=$(echo $2 | jq -r '.mountOptions')
    
    # To visualize the JSON parameters received by FlexVolume
    #echo $2 >> /usr/libexec/kubernetes/kubelet-plugins/volume/exec/cb~temp/dump.txt
    #echo $1 >> /usr/libexec/kubernetes/kubelet-plugins/volume/exec/cb~temp/mount_dump.txt

        if [ $(ismounted) -eq 1 ] ; then
            log "{\"status\": \"Success\"}"
            exit 0
        fi

        sudo mkdir -p ${MNTPATH} &> /dev/null
        sudo mkdir -p ${VOLUME_SRC} &> /dev/null

        sudo mount -o rw,noexec,nosuid,nodev,bind "${VOLUME_SRC}" "${MNTPATH}" &> /dev/null

        if [ $? -ne 0 ]; then
                2>&1

               err '{ "status": "Failure", "message": "Failed to mount device '${VOLUME_SRC}' at '${MNTPATH}' , volume_src: '${VOLUME_SRC}'"}'
               exit 1
        fi
        log '{"status": "Success"}'

        exit 0
}

unmount() {
        MNTPATH=$1
        if [ $(ismounted) -eq 0 ] ; then
            log "{\"status\": \"Success\"}"
            exit 0
        fi

        umount ${MNTPATH} &> /dev/null
        if [ $? -ne 0 ]; then
            err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"                exit 1
        fi
        log '{"status": "Success"}'
        exit 0
}

getvolumename() {
    SOURCE=$(echo $1 | jq -r '.source')
    MOUNT_OPTIONS=$(echo $1 | jq -r '.mountOptions')

    log "{\"status\": \"Success\", \"volumeName\": \"${SOURCE}/${MOUNT_OPTIONS}\"}"
    exit 0
}

op=$1

if [ "$op" = "init" ]; then
        log '{"status": "Success"}'
        exit 0
fi

if [ $# -lt 2 ]; then
        usage
fi

shift

case "$op" in
    mount)
        domount $*
        ;;
    unmount)
        unmount $*
        ;;
    getvolumename)
        getvolumename $*
        ;;
    *)
        err "{ \"status\": \"Not supported\" }"
        exit 1
esac

exit 1;
